{"version":3,"file":"life.js","sources":["../node_modules/@thewhodidthis/otto/index.es","../index.es"],"sourcesContent":["// # Otto\n// Helps deal CAs\n\n// Wrap index round edges\n// http://stackoverflow.com/questions/1082917/mod-of-negative-number-is-melting-my-brain\nconst myMod = (a, b) => a - (b * Math.floor(a / b));\nconst zeros = (1024).toString(2).split('').slice(1).join('');\nconst zerosMax = zeros.length;\n\n// Rule to binary convert\nconst parseRule = (rule) => {\n  // Base 2 digits\n  const code = rule.toString(2);\n  const diff = Math.max(zerosMax, zerosMax - code.length);\n\n  // Zero pad ruleset\n  return `${zeros}${code}`.substr(diff).split('').reverse();\n};\n\n// Defaults\nconst data = {\n  size: 1,\n  rule: 30,\n\n  // How far from center lie the neighbors\n  ends: [-1, 0, 1],\n\n  // Flip middle cell\n  seed: (v, i, view) => i === Math.floor(view.length * 0.5),\n\n  // Index based lookup\n  stat: (hood, code) => {\n    const flags = hood.join('').toString(2);\n    const stats = parseInt(flags, 2);\n\n    return code[stats];\n  },\n};\n\n// Setup\nconst Otto = (opts) => {\n  // Merge options and defaults\n  const { size, rule, ends, stat, seed } = Object.assign({}, data, opts);\n  const code = parseRule(rule);\n\n  // Calculate state\n  const step = (v, i, view) => {\n    const hood = ends.map((span) => {\n      // The index for each neighbor cell\n      const site = myMod(span + i, view.length);\n\n        // The state of each neighbor\n      return view[site];\n    });\n\n    return stat(hood, code, v);\n  };\n\n  // Clipboard, zero filled, need to work out adjustable size part\n  let grid = new Uint8Array(size);\n  let next = seed;\n\n  return () => {\n    // Update\n    grid = grid.map(next);\n    next = step;\n\n    return grid;\n  };\n};\n\nexport default Otto;\n\n","// # Life\n// Just another game of life runner\n\nimport Otto from '@thewhodidthis/otto';\n\nconst mySum = (a, b) => a + b;\nconst mooreEnds = s => [-1, 1, -s, s, -1 - s, 1 - s, -1 + s, 1 + s];\n\nconst Life = (opts) => {\n  const area = { size: opts.size * opts.size };\n  const data = Object.assign({\n    ends: mooreEnds(opts.size),\n    seed: () => Math.floor(Math.random() * 2) % 2,\n    stat: (hood, code, flag) => {\n      const stats = hood.reduce(mySum);\n\n      if ((stats <= 1 || stats >= 4) && flag === 1) {\n        return 0;\n      }\n\n      if (stats === 3 && flag === 0) {\n        return 1;\n      }\n\n      return flag;\n    },\n  }, opts, area);\n\n  return Otto(data);\n};\n\nexport default Life;\n\n"],"names":["myMod","a","b","Math","floor","zeros","toString","split","slice","join","zerosMax","length","parseRule","rule","code","diff","max","substr","reverse","data","size","ends","seed","v","i","view","stat","hood","flags","stats","parseInt","Otto","opts","Object","assign","step","map","span","site","grid","Uint8Array","next","mySum","mooreEnds","s","Life","area","random","flag","reduce"],"mappings":"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"}